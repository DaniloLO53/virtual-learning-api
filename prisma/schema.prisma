// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProfilePicture {
  id      Int      @id @default(autoincrement())
  title   String
  size    String
  type    String
  student Student?
  teacher Teacher?
}

model Student {
  id                 Int              @id @default(autoincrement())
  email              String           @unique
  password           String
  first_name         String?
  last_name          String?
  gender             String           @default("none")
  registrations      Registration[]
  updated_at         DateTime         @default(now())
  created_at         DateTime
  activities_done    ActivitiesDone[]
  messages           Message[]
  profile_picture_id Int?             @unique
  profile_picture    ProfilePicture?  @relation(fields: [profile_picture_id], references: [id], onDelete: Cascade)

  @@map("students")
}

model Teacher {
  id                 Int             @id @default(autoincrement())
  email              String          @unique
  password           String
  first_name         String?
  last_name          String?
  gender             String          @default("none")
  courses            Course[]
  updated_at         DateTime        @default(now())
  created_at         DateTime
  messages           Message[]
  profile_picture_id Int?            @unique
  profile_picture    ProfilePicture? @relation(fields: [profile_picture_id], references: [id], onDelete: Cascade)

  @@map("teachers")
}

model Course {
  id            Int            @id @default(autoincrement())
  title         String
  code          String         @default("XXX000")
  description   String?
  password      String?
  opened        Boolean        @default(true)
  teacher       Teacher        @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  teacher_id    Int
  registrations Registration[]
  articles      Article[]
  updated_at    DateTime       @default(now())
  created_at    DateTime
  activities    Activity[]
  messages      Message[]

  @@map("courses")
}

model Section {
  id         Int      @id @default(autoincrement())
  content    String
  title      String
  article    Article  @relation(fields: [article_id], references: [id], onDelete: Cascade)
  article_id Int
  updated_at DateTime @default(now())
  created_at DateTime

  @@map("sections")
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  user_id    Int
  student    Student? @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "student_id")
  teacher    Teacher? @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "teachers_id")
  course_id  Int
  course     Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  updated_at DateTime @default(now())
  created_at DateTime

  @@map("messages")
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  course      Course    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  course_id   Int
  sections    Section[]
  updated_at  DateTime  @default(now())
  created_at  DateTime

  @@map("articles")
}

model Activity {
  id              Int              @id @default(autoincrement())
  uuid            String           @default("")
  title           String
  description     String
  deadline        DateTime?
  file            Json?
  course          Course           @relation(fields: [course_id], references: [id], onDelete: Cascade)
  course_id       Int
  updated_at      DateTime         @default(now())
  created_at      DateTime
  activities_done ActivitiesDone[]

  @@map("activities")
}

model ActivitiesDone {
  id          Int      @id @default(autoincrement())
  uuid        String   @default("")
  activity_id Int
  activity    Activity @relation(fields: [activity_id], references: [id], onDelete: Cascade)
  student_id  Int
  student     Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  grade       String?
  description String?
  created_at  DateTime

  @@map("activities_done")
}

model Registration {
  id         Int      @id @default(autoincrement())
  student_id Int
  student    Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  course_id  Int
  course     Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)
  updated_at DateTime @default(now())
  created_at DateTime

  @@map("registrations")
}
